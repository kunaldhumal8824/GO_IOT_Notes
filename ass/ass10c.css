/*
 1. Block Diagram of Arduino Uno Board Interfacing with IR Sensor
Hereâ€™s a block diagram illustrating the interface between an Arduino Uno board and an IR sensor:

lua
Copy
         +------------------------+
         |                        |
         |      IR SENSOR          |
         |   (Signal Pin)   -----> | Pin 2 (Digital Pin)  |
         |   (VCC)          -----> | 5V (Power)           |
         |   (GND)          -----> | GND                   |
         |                        |
         +------------------------+
                   |
                   |
                   v
         +------------------------+
         |                        |
         |      ARDUINO UNO        |
         |                        |
         |   - Pin 2  -----> Input |
         |   - Pin 13 ---> Output |
         |   - 5V  ------------> VCC|
         |   - GND -------------> GND|
         |                        |
         +------------------------+
                   |
                   v
       +-------------------------+
       |                         |
       |        BUZZER/LED       |
       |   (Output Device)       |
       +-------------------------+
Explanation of Block Diagram:
IR Sensor:

Signal Pin: Connected to Pin 2 (Digital Pin) of the Arduino. This pin reads the signal sent from the IR sensor, which determines if there is an object or obstacle in front of it.

VCC: Connected to the 5V pin on the Arduino for power.

GND: Connected to GND on the Arduino to complete the circuit.

Arduino Uno:

The Arduino Uno reads the signal from the IR sensor via Pin 2. If the sensor detects an object, it can trigger an output device like an LED or buzzer.

Pin 13 on the Arduino controls an output device (like an LED or buzzer) based on the input received from the IR sensor.

Output Device (LED/Buzzer):

Pin 13 controls the output device (LED/Buzzer) based on the input received from the IR sensor. When the sensor detects an object, the LED or buzzer can be activated.

2. C++ Program to Turn ON/OFF Buzzer:
Here is a simple C++ program to turn a buzzer ON/OFF on the Arduino Uno using a button as an input.

C++ Code: */


// Pin configuration
int buzzerPin = 9;  // Buzzer connected to digital pin 9
int buttonPin = 7;  // Button connected to digital pin 7
int buttonState = 0; // Variable to store the state of the button

void setup() {
  // Initialize buzzerPin as an output
  pinMode(buzzerPin, OUTPUT);
  
  // Initialize buttonPin as an input
  pinMode(buttonPin, INPUT);
}

void loop() {
  // Read the state of the button
  buttonState = digitalRead(buttonPin);

  // Check if the button is pressed
  if (buttonState == HIGH) {
    // Turn the buzzer ON
    digitalWrite(buzzerPin, HIGH);
  } else {
    // Turn the buzzer OFF
    digitalWrite(buzzerPin, LOW);
  }
}
/* Explanation of the Program:
Pin Configuration:

Buzzer Pin: The buzzer is connected to Pin 9 on the Arduino. We define this pin as an OUTPUT.

Button Pin: The button is connected to Pin 7 on the Arduino. We define this pin as an INPUT to detect whether the button is pressed or not.

Logic:

In the loop() function, we continuously check the button state using digitalRead(buttonPin).

If the button is pressed (i.e., the state is HIGH), we turn the buzzer ON by setting the buzzerPin to HIGH.

If the button is not pressed (i.e., the state is LOW), we turn the buzzer OFF by setting the buzzerPin to LOW.

Program Flow:

The program continuously checks the button state in the loop() function. When the button is pressed, the buzzer will sound. When the button is released, the buzzer will stop.

3. Observations on Input and Output:
Input:
The input in this case is the button press. The program reads the state of the button to decide whether to turn the buzzer ON or OFF.

The button should be connected to Pin 7 (Digital Pin).

Output:
The output is the buzzer which is connected to Pin 9. The buzzer will turn ON when the button is pressed and turn OFF when the button is released.

Sample Output (Visual):
When the button is pressed, the buzzer will make a sound (or turn ON if using an active buzzer).

When the button is released, the buzzer will be silent (or turned OFF).

4. Result and Conclusion:
Result:
The program successfully toggles the buzzer ON and OFF based on the state of the button. The buzzer is activated when the button is pressed and deactivated when the button is released.

Conclusion:
This program demonstrates basic digital input and output using an Arduino.

By using a button as an input, we are able to control an output device (buzzer) on the Arduino board.

This setup is commonly used in interactive applications, such as alarms or notifications based on user interaction. */